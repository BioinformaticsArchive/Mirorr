/*=========================================================================
Program: mirorr
Module: itkBlockMatcherThreaded.h
Author: David Rivest-Henault
Created: 02 Nov 2012

Copyright (c) 2009-15 CSIRO. All rights reserved.

For complete copyright, license and disclaimer of warranty
information see the LICENSE.txt file for details.

This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notice for more information.
=========================================================================*/

#ifndef __itkBlockMatcherThreaded_h
#define __itkBlockMatcherThreaded_h

#include "itkBlockMatcher.h"


namespace itk
{
/** \class Class for block matching two images.
 * The images must the same type and dimension.
 *
 * Uses: itkSparseImageRegionConstIterator
 */
template < typename ImageType >
class /*ITK_EXPORT*/ BlockMatcherThreaded : public BlockMatcher<ImageType >
{
public:
  /** Standard class typedefs. */
  typedef BlockMatcherThreaded                          Self;
  typedef BlockMatcher<ImageType >                      Superclass;
  typedef SmartPointer<Self>                            Pointer;
  typedef SmartPointer<const Self>                      ConstPointer;
  itkStaticConstMacro(ImageDimension, unsigned int,
      ImageType::ImageDimension);

#if ITK_VERSION_MAJOR < 4
  typedef int ThreadIdType;
#endif

  /** Define the primary outputs of the algorithm */
  typedef Index<ImageDimension>     IndexType;
  typedef std::vector< IndexType >  IndexListType;

  typedef typename ImageType::PointType  PointType;
  typedef std::vector< PointType >       PointListType;

  typedef typename ImageType::SpacingType  SpacingType;
  typedef typename ImageType::SizeType     SizeType;
  typedef typename ImageType::PixelType    PixelType;

  typedef typename Superclass::MaskType    MaskType;
  typedef typename Superclass::MaskPointer MaskPointer;

  /** Define Region Types*/
  typedef itk::ImageRegion<ImageType::ImageDimension>      RegionType;
  typedef itk::SparseImageRegionConstIterator< ImageType > SparseConstIterator;
  typedef itk::ImageRegionConstIterator< ImageType >       ConstIterator;
  typedef itk::ImageRegionConstIterator< MaskType >        MaskConstIterator;

  typedef typename Superclass::RegionType    SuperRegionType;
  typedef typename Superclass::PointListType SuperPointListType;

  /** Method for creation through the object factory. */
  itkNewMacro(Self);

  /** Run-time type information (and related methods). */
  itkTypeMacro(BlockMatcherThreaded, BlockMatcher);

  /**This takes a set of block positions in a floating image,
   * computes the match with surrounding blocks in a moving image,
   * returns the offset of the block giving the best match*/
  virtual void GetOffsets( SuperPointListType &blockPositions,
      SuperPointListType &blockMatchPositions );

protected:

  void GetOffsets( SuperRegionType baseRegion, SuperPointListType &blockPositionsOut,
      SuperPointListType &blockMatchPositionsOut ) const;

  //Constructor is private because classes are generated by object factory
  BlockMatcherThreaded() :
    Superclass()
    {
    }

  virtual ~BlockMatcherThreaded() {;}

  void InitializeLists();
  void ReduceLists(PointListType &blockPositions,
      PointListType &blockMatchPositions);

  unsigned int SplitRequestedRegion(unsigned int threadId, unsigned int threadCount, RegionType & splitRegion);

  /** Static function used as a "callback" by the MultiThreader.  The threading
   * library will call this routine for each thread, which will delegate the
   * control to ThreadedGenerateData(). */
  static ITK_THREAD_RETURN_TYPE ThreaderCallback(void *arg);

  /** Internal structure used for passing image data into the threading library
    */
  struct ThreadStruct {
    Pointer Matcher;
  };

  std::vector< PointListType > blockPositionsFractions;
  std::vector< PointListType > blockMatchPositionsFractions;
};
}
#ifndef ITK_MANUAL_INSTANTIATION
#include "itkBlockMatcherThreaded.txx"
#endif

#endif
