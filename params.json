{"name":"Mirorr","tagline":"Mirorr: Multimodal Image Registration using blOck-matching and Robust Regression","body":"Mirorr \r\n======\r\n\r\nThis is the main web page for CSIRO Mirorr.\r\n\r\n\r\nCONTENTS\r\n--------\r\n\r\n- DESCRIPTION\r\n- CITATION\r\n- LICENSE\r\n- PRE-REQUISITES - SUMMARY\r\n- PRE-REQUISITES - DETAILED INSTRUCTIONS\r\n- BUILD INSTRUCTION\r\n- TESTING THE BUILD\r\n- FREQUENTLY ASKED QUESTIONS (FAQ)\r\n\r\n\r\nDESCRIPTION\r\n-----------\r\n\r\nThis package contains the source code of Mirorr, which implement both the Mirorr and SymMirorr robust rigid/affine image registration methods presented in:\r\n\r\nDavid Rivest-Henault, Nicholas Dowson, Peter B. Greer, Jurgen Fripp, and Jason Dowling \"Robust inverse-consistent affine CT-MR registration in MRI-assisted and MRI-alone prostate radiation therapy.\" Medical Image Analysis (In press), 2015.\r\n\r\nThis software has been developed by a team of researchers from [CSIRO](http://www.csiro.au/)'s [The Australian E-Health Research Centre](http://aehrc.com/). See AUTHORS.txt for more details.\r\n\r\nTo use SymMirorr, run the program as follows:  `mirorr --reg-mode symmetric [other program arguments]`\r\nTo use Mirorr, run the program as follows:     `mirorr --reg-mode classic   [other program arguments]`\r\nNote: running SymMirorr is the default behaviour (i.e. you can omit the `--reg-mode symmetric` switch).\r\n\r\n\r\n### Detailed description ###\r\n\r\nThe mirorr program implement a robust multimodal image registration method that is based on local correlation computed using a block-matching approach, as described in the paper indicated above. Mirror is, for the moment, only concerned with global registration, that is, using either a rigid or an affine transformation model. When using the default parameter set (--reg-mode symmetric), the registration method benefits from a half-way space definition to gain inverse-consistency high degree. That means that the order of input images on the command line has a notably reduced effect on the end result, simplifying analysis, and increasing robustness.\r\n\r\nThis algorithm has been extensively tested for CT-MR, MR-MR and MR-PET registrations.\r\n\r\n\r\nCITATION\r\n--------\r\n\r\nIf you use this program for scientific research, we would appreciate if you could cite the paper mentioned in the Description section, above.\r\n\r\n\r\nLICENSE\r\n-------\r\n\r\nCopyright (c) 2009-15 CSIRO. All rights reserved.\r\n\r\nFor complete copyright, license and disclaimer of warranty information see LICENSE.txt file for details.\r\n\r\nThis software is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the above copyright notice for more information.\r\n\r\n\r\nPRE-REQUISITES - SUMMARY\r\n------------------------\r\n\r\nThe following packages need to be installed to build Mirorr:\r\n - CMake\r\n - ITK, v4.X recommanded.\r\n - Boost, components: program_options filesystem system\r\n\r\n\r\nPRE-REQUISITES - DETAILED INSTRUCTIONS\r\n--------------------------------------\r\n\r\nThe Mirror application is built using the CMake system. In addition, it depends on several other libraries:\r\n\r\n* The Insight Toolkit, with powerful pipelining, multithreading and\r\n  medical image IO/manipulation routines, and large helpful user community.\r\n    http://www.itk.org/ITK/resources/software.html\r\n  Note: only versions of ITK 4 or higher are supported.\r\n\r\n* Several Boost C++ libraries: including program_options, shared_ptr,\r\n  timer, array, serialization, property_tree\r\n    http://www.boost.org/users/download/\r\n\r\nThese libraries were selected both because they are useful and because\r\nthey have BSD/MIT style licenses.\r\n\r\nAll of the libraries will need to be downloaded and installed. In each\r\ncase, their source can be downloaded from the urls listed above and\r\ncompiled based on their respective instructions. \r\n\r\nHowever it is probably more convenient to use your operating system's\r\npackage manager for this purpose. Instructions for Ubuntu are as follows:\r\n\r\n1. First add the neurodebian repository to your package manager so you\r\ncan conveniently get hold of the latest ITK, as described here:\r\n\r\nhttp://neuro.debian.net/ \r\ne.g. for Ubuntu 12.04: \r\n  wget -O- http://neuro.debian.net/lists/precise.au.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\r\n  sudo apt-key adv --recv-keys --keyserver hkp://pgp.mit.edu:80 2649A5A9\r\n  sudo apt-get update\r\n\r\ne.g. for Ubuntu 14.04: \r\n  wget -O- http://neuro.debian.net/lists/trusty.au.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\r\n  sudo apt-key adv --recv-keys --keyserver hkp://pgp.mit.edu:80 2649A5A9 \r\n  sudo apt-get update\r\n\r\n2. Install the cmake build system and its gui\r\nsudo apt-get install cmake cmake-curses-gui\r\n\r\n3. Install ITK\r\nsudo apt-get install libinsighttoolkit4-dev\r\n\r\n4. Install all the boost libraries\r\nsudo apt-get install libboost-all-dev\r\n\r\n\r\nBUILD INSTRUCTION\r\n-----------------\r\n\r\n> Assuming you are in the root directory of the package:\r\n\r\n1. mkdir build; \r\n2. cd build; \r\n3. cmake ../Mirorr -DCMAKE_BUILD_TYPE=Release; \r\n4. make -j4\r\n\r\n\r\nTESTING THE BUILD\r\n-----------------\r\n\r\ncd ../test; \r\n./test.sh\r\n\r\n\r\nFREQUENTLY ASKED QUESTIONS (FAQ)\r\n--------------------------------\r\n\r\n- **Mirorr is slow.** Did you forget to define the CMake variable CMAKE_BUILD_TYPE to Release (CMAKE_BUILD_TYPE=Release)? Typical speedup is about 8x. In addition, you can double check that the program is really using all available CPU cores (or ask for more cores on the cluster). It is possible to make the program use a specific number of cores with --nthreads.\r\n\r\n- **Mirorr is still slow.** Sometimes, the two highest resolution settings of the image pyramid can be vastly redundant. You can try to remove one with the -b and -c options.\r\n\r\n- **I want more speed.** If you have a GPU that supports OpenCL (most recent NVIDIA or ATI), you can try our GPU implementation. Compile the program with (USE_OPENCL=ON) and turn on GPU by using the --use-gpu-bm switch.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}